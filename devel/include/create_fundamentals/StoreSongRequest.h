// Generated by gencpp from file create_fundamentals/StoreSongRequest.msg
// DO NOT EDIT!


#ifndef CREATE_FUNDAMENTALS_MESSAGE_STORESONGREQUEST_H
#define CREATE_FUNDAMENTALS_MESSAGE_STORESONGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace create_fundamentals
{
template <class ContainerAllocator>
struct StoreSongRequest_
{
  typedef StoreSongRequest_<ContainerAllocator> Type;

  StoreSongRequest_()
    : number(0)
    , song()  {
    }
  StoreSongRequest_(const ContainerAllocator& _alloc)
    : number(0)
    , song(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _number_type;
  _number_type number;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _song_type;
  _song_type song;





  typedef boost::shared_ptr< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StoreSongRequest_

typedef ::create_fundamentals::StoreSongRequest_<std::allocator<void> > StoreSongRequest;

typedef boost::shared_ptr< ::create_fundamentals::StoreSongRequest > StoreSongRequestPtr;
typedef boost::shared_ptr< ::create_fundamentals::StoreSongRequest const> StoreSongRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::create_fundamentals::StoreSongRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::create_fundamentals::StoreSongRequest_<ContainerAllocator1> & lhs, const ::create_fundamentals::StoreSongRequest_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number &&
    lhs.song == rhs.song;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::create_fundamentals::StoreSongRequest_<ContainerAllocator1> & lhs, const ::create_fundamentals::StoreSongRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace create_fundamentals

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b85e097544987e61f2decd2e56d69c40";
  }

  static const char* value(const ::create_fundamentals::StoreSongRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb85e097544987e61ULL;
  static const uint64_t static_value2 = 0xf2decd2e56d69c40ULL;
};

template<class ContainerAllocator>
struct DataType< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "create_fundamentals/StoreSongRequest";
  }

  static const char* value(const ::create_fundamentals::StoreSongRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 number\n"
"uint32[] song\n"
;
  }

  static const char* value(const ::create_fundamentals::StoreSongRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
      stream.next(m.song);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StoreSongRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::create_fundamentals::StoreSongRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::create_fundamentals::StoreSongRequest_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.number);
    s << indent << "song[]" << std::endl;
    for (size_t i = 0; i < v.song.size(); ++i)
    {
      s << indent << "  song[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.song[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CREATE_FUNDAMENTALS_MESSAGE_STORESONGREQUEST_H
